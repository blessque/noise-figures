---
alwaysApply: true
---

# Cursor Agent: Build Grainy Particle Shape Editor (p5.js)

> Machine-directed instructions for an LLM-driven Cursor agent to create the web UI using p5.js and the provided GitHub tool.

---

## Objective
Create a single-file, maintainable p5.js web editor that: draws/imports vector shapes, converts them to a grainy particle fill, previews with visual blur and color wheel, and exports PNG and SVG (using zenozeng/p5.js-svg). Deliver as a repository with clear commits and a functioning `index.html` demo.

---

## Environment / Framework
- Use plain HTML + ES modules (single `index.html` is acceptable).
- p5.js version **1.6.0** (cdn) and `zenozeng/p5.js-svg` (cdn) must be included.
- No heavy frameworks (React/Vue) unless user requests — goal: small reproducible demo.

---

## Files to produce (minimum)
- `index.html` — single-file app (UI + p5 sketch). Keep CSS embedded.
- `README.md` — short usage + run instructions.
- `.gitignore` — ignore node_modules, .DS_Store, dist.

Naming & structure must be consistent; keep example assets in `/assets` if needed.

---

## Implementation rules (DO / DON'T)
### DO
1. Use the **p5 instance** for all p5 operations: `p.createCanvas`, `p.createGraphics`, `p.save`, etc. Never rely on `window.createGraphics`.
2. Keep UI DOM outside p5 canvas. Use `document.getElementById()` for controls; wire events to regenerate particles or export.
3. Represent shapes as objects: `{type, x, y, w, h, gfx}` where `gfx` is either a `p5.Graphics` or a fallback object with `.canvas`.
4. For sampling shapes to generate particles, render each shape to an offscreen canvas (via `p.createGraphics(...).canvas`) and combine into a mask canvas for `getImageData` sampling.
5. Provide a safe fallback for `createGraphics` (plain `HTMLCanvasElement`) so code runs even while p5 instance is initializing.
6. Expose a `generateParticles()` entrypoint and call it whenever shapes change or user adjusts particle count.
7. Export SVG by spinning up a temporary p5 instance with `p.SVG` renderer and drawing particles as circles — each particle becomes a vector `<circle>`.
8. Keep particle count and sizes configurable; default sensible values (e.g., 5k particles, size 1.5).
9. Add small, descriptive commits. Use present-tense verbs: `add`, `fix`, `implement`.

### DON'T
1. Don’t call `window.createGraphics(...)`. This throws: `TypeError: window.createGraphics is not a function`.
2. Don’t draw heavy UI inside p5 draw loop; only render particles and quick guides each frame.
3. Don’t freeze the main thread: avoid extremely large default particle counts & avoid blocking loops longer than ~200ms.
4. Don’t inline very large SVG exports as base64; let the browser save the SVG file via `p.save()` or anchor download.

---

## Performance & Testing
- Test with particle counts: 500, 5k, 20k to verify responsiveness.
- If sampling fails to reach requested count, fallback to bounding-box sampling per shape.
- Add console.info logs for major steps: `createGraphics fallback used`, `particles generated N`, `export svg started`.

---

## GitHub / Cursor agent steps (exact, imperative)
1. Create a new repo or branch named `grainy-p5-editor`.
2. Add files: `index.html`, `README.md`, `.gitignore`.
3. Commit: `feat: initial p5 grainy editor scaffold`.
4. Open PR (if repo has protected rules). Include checklist: p5 loads, can draw rect/ellipse/freehand, import simple path SVG, export PNG, export SVG.
5. Run quick manual test: open `index.html` locally in Chrome or Firefox.
6. If errors occur, inspect console and verify that `window._p5Instance` is set and that `createShapeGraphics` used `window._p5Instance.createGraphics` or fallback.

---

## UX requirements
- Simple toolbar: tool selector, particle count slider, particle size, blur, color picker, import SVG file input, regen, export PNG, export SVG.
- Visual blur is applied only on-screen using 2D canvas context filter; exported SVG should be vector-only (no raster blur applied).

---

## Deliverable Acceptance Criteria
- `index.html` opens and shows a canvas and UI.
- Drawing shapes followed by `Regenerate` produces visible particle fill matching the shape.
- Export SVG produces a downloadable vector file composed of circles placed at particle positions.
- No runtime error referencing `window.createGraphics`.

---

## Minimal debug checklist for agent
- If `window.createGraphics` error appears: ensure `createShapeGraphics` uses `window._p5Instance.createGraphics` (or `p.createGraphics` if using instance `p` inside the same function). If p5 instance not accessible, use HTML canvas fallback.
- Verify `s.g.canvas` exists before `drawImage`.
- Confirm `p5.js` and `p5.svg` are loaded from CDN in the correct order.

---

## Communication model
- Keep commits atomic and include short commit messages.
- If ambiguity arises (UI behavior, exact export format), ask the human user with concise options (A/B) and continue after response.

---

End of instructions.


